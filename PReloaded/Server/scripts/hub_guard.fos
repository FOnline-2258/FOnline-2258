//
// FOnline: 2238
// Rotators
//
// hub_guard.fos
//

// See guard.fos for explanation of all guard stuff.

#include "_macros.fos"
#include "factions_h.fos"
#include "guard_h.fos"
#include "npc_common_h.fos"
#include "npc_planes_h.fos"
#include "npc_roles_h.fos"
#include "patrolling.fos"

//import void InitBountyRecord(Critter& npc) from "bounties";
import void NpcSetLevel(Critter& npc, int level) from "parameters";

void critter_init(Critter& guard, bool firstTime)
{
    //if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_SHERRIF)
        //InitBountyRecord(guard);

    guard.SetEvent(CRITTER_EVENT_IDLE, "_Idle");
    guard.SetEvent(CRITTER_EVENT_MESSAGE, "_OnMessage");
    guard.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_OnShowCritter");
    guard.SetEvent(CRITTER_EVENT_SMTH_STEALING, "_OnSomeoneSteal");

    GuardInit(guard);

    if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_CLINIC || guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_CHURCH)
    {
        guard.ModeBase[MODE_NO_HOME] = 1;
    }

    if(firstTime)
    {
        NpcSetLevel(guard, 26);
        GuardPerks(guard);
    }

    if (guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_BOSS || guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_TICKETS || guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_GRUNT)
    {
        guard.StatBase[ST_REPLICATION_TIME] = REPLICATION_MINUTE(1);
    }
}

void critter_init_parking(Critter& guard, bool firstTime)
{
    //if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_SHERRIF)
        //InitBountyRecord(guard);

    guard.SetEvent(CRITTER_EVENT_IDLE, "_IdleParking");
    guard.SetEvent(CRITTER_EVENT_MESSAGE, "_OnMessage");
    guard.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_OnShowCritter");
    guard.SetEvent(CRITTER_EVENT_SMTH_STEALING, "_OnSomeoneSteal");

    GuardInit(guard);

    if (guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING1 || guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING2 || guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING3
       || guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING4 || guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING5 || guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING6
       || guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING7)
    {
        guard.ModeBase[MODE_NO_HOME] = 1;
        guard.StatBase[ST_REPLICATION_TIME] = REPLICATION_MINUTE(1);
    }

    if(firstTime)
    {
        NpcSetLevel(guard, 26);
        GuardPerks(guard);
    }
}


bool IsPatrolling(Critter& guard)
{
    return(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_ENTRANCE1 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_ENTRANCE2 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_ENTRANCE3 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_ENTRANCE4 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_BRAHMIN1  ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_METROGUARD_1 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_METROGUARD_2 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING1 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING2 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING3 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING4 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING5 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING6 ||
           guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING7);
}

void _Idle(Critter& guard)
{
    GuardOnIdle(guard);

    if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_ENTRANCE1)
    {
        _GetNextNode(guard, 3)         // Route 3 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_ENTRANCE2)
    {
        _GetNextNode(guard, 4)         // Route 4 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_ENTRANCE3)
    {
        _GetNextNode(guard, 5)         // Route 5 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_ENTRANCE4)
    {
        _GetNextNode(guard, 6)         // Route 6 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_BRAHMIN1)
    {
        _GetNextNode(guard, 7)         // Route 7 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_METROGUARD_1)
    {
        _GetNextNode(guard, 8)         // Route 8 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_METROGUARD_2)
    {
        _GetNextNode(guard, 9)         // Route 9 as defined in patrolroutes.fos
    }

    if(IsPatrolling(guard))
    {
        AddWalkPlane(guard, 0, node.GetX(), node.GetY(), node.GetDir(), false, 0);
        AddWaitPlan(guard, node.GetWait());
    }
}

void _IdleParking(Critter& guard)
{
    GuardOnIdle(guard);

    if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING1) {
        _GetNextNode(guard, 10)         // Route index 10 as defined (by array position) in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING2) {
        _GetNextNode(guard, 11)         // Route index 11 as defined (by array position) in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING3) {
        _GetNextNode(guard, 12)         // Route index 12 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING4) {
        _GetNextNode(guard, 13)         // Route index 13 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING5) {
        _GetNextNode(guard, 14)         // Route index 14 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING6) {
        _GetNextNode(guard, 15)         // Route index 15 as defined in patrolroutes.fos
    }
    else if(guard.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING7) {
        _GetNextNode(guard, 16)         // Route index 16 as defined in patrolroutes.fos
    }

    uint waitTime = node.GetWait() * Random(1, 3);
    AddWalkAndWaitPlane(guard, 0, node.GetX(), node.GetY(), node.GetDir(), false, 0, waitTime);
}

array<string> hubGuardParkingGruntAttackText_Male_to_Male = {"Dibs on his mirrored shades!", "It's target practice boys!", "Another day, another trophy!", "Wasteland is harsh!"};
array<string> hubGuardParkingGruntAttackText_Male_to_Female = {"Bang, Bang, Baby!", "Shouldn't have left the vault kitchen!", "We are equal in the grave only!", "Wasteland is harsh!"};
array<string> hubGuardParkingGruntAttackText_Female_to_Male = {"Another day, another trophy!", "Your baby shot you down! Bang! Bang!", "Wasteland is harsh!"};
array<string> hubGuardParkingGruntAttackText_Female_to_Female = {"Sorry honey!", "Dibs on her cosmetic case!", "Wasteland is harsh!"};
array<string> hubGuardParkingTicketsAttackText = {"Not another blue suit", "Another one bites the asphalt", "Wasteland is harsh"};
array<string> hubGuardParkingTicketsAttackTextFemale = {"You got away with anything in that Vault, huh?", "Should have stayed in the kitchen", "Wasteland isn't pink kiddo"};


void _OnMessage(Critter& npc, Critter& player, int num, int val)
{
    GuardOnMessage(npc, player, num, val);

    switch(num)
    {
        case MSG_HUB_PLAYER_NEAR_PARKING_ENTRANCE:
            if (npc.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_BOSS) {
                npc.Say(SAY_NORM_ON_HEAD, "Parking tickets over there ...");
            }
            if (npc.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_TICKETS) {
                npc.Say(SAY_NORM_ON_HEAD, "Pay the parking fee here first to enter.");
            }
        break;
        case MSG_HUB_PLAYER_PARKING_ENTRANCE:
            if (npc.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_BOSS) {
                npc.Say(SAY_SHOUT_ON_HEAD, "STOP!");
            }
        break;
        case MSG_HUB_PLAYER_PARKING_ILLEGAL_ENTRY:
            if (npc.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_BOSS) {
                npc.Say(SAY_SHOUT_ON_HEAD, "Intruder ALERT!");
                AddAttackPlane(npc, 100, player, true);
            }
            if (npc.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_GRUNT) {
                if (Random(1, 100) > 66) {
                    string text;
                    if (_CritIsFemale(npc)) {
                        if (_CritIsFemale(player)) {
                            text = random_from_array(hubGuardParkingGruntAttackText_Female_to_Female);
                        } else {
                            text = random_from_array(hubGuardParkingGruntAttackText_Female_to_Male);
                        }
                    } else {
                        if (_CritIsFemale(player)) {
                            text = random_from_array(hubGuardParkingGruntAttackText_Male_to_Female);
                        } else {
                            text = random_from_array(hubGuardParkingGruntAttackText_Male_to_Male);
                        }
                    }
                    npc.Say(SAY_SHOUT_ON_HEAD, text);
                }
                AddAttackPlane(npc, 100, player, true);
            }
            if (npc.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_TICKETS) {
                if (_CritIsFemale(player)) {
                    npc.Say(SAY_NORM_ON_HEAD, random_from_array(hubGuardParkingTicketsAttackTextFemale));
                } else {
                    npc.Say(SAY_NORM_ON_HEAD, random_from_array(hubGuardParkingTicketsAttackText));
                }
                AddAttackPlane(npc, 100, player, true);
            }
        break;
        case MSG_HUB_PLAYER_NEAR_PARKING_ENTRANCE_PAYED:
            if (npc.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_TICKETS) {
                npc.Say(SAY_NORM_ON_HEAD, "Payed.");
            }
        break;
        case MSG_HUB_PLAYER_PARKING_ENTRANCE_PAYED:
            if (npc.Stat[ST_NPC_ROLE] == ROLE_HUB_GUARD_PARKING_BOSS) {
                npc.Say(SAY_NORM_ON_HEAD, "Go on.");
            }
        break;
    }
}

void _OnSomeoneSteal(Critter& guard, Critter& target, Critter& thief, bool success, Item& item, uint count)
{
    GuardOnSomeoneSteal(guard, target, thief, success, item, count);
}

void _OnShowCritter(Critter& guard, Critter& player)
{
    GuardOnShowCritter(guard, player);
}
