//
// FOClassic: Brave New World
// Sasabmeg (Slowhand)
//
// mapper_entitySwapper.fos
//

// Entity Swapper Plugin - allows to swap selected entities thematically, for example: Rust Railing Wall -> Silver Painted Wall


#ifndef __MAPPER_INPUT_VISUALIZER__
#define __MAPPER_INPUT_VISUALIZER__

#include "_mapper_macros.fos"
#include "mapper_plugin_h.fos"
#include "mapper_utils_h.fos"
#include "strtoint_h.fos"

#define OBJ_PANEL_SIZE_W            (385)
#define OBJ_PANEL_SIZE_H            (560)
#define INT_PANEL_SIZE_W            (1050)
#define INT_PANEL_SIZE_H            (165)

// Flags
#define TOGGLE_FLAG                 # (x, flag)((x) ^= (flag))
#define SET_FLAG                    # (x, flag)((x) |= (flag))
#define CTRL_FLAG                   (1)
#define SHIFT_FLAG                  (2)
#define ALT_FLAG                    (4)

class CInputVisualizer {

    //  Input keys
    string statusText = "";
    string controlText = "";
    string letterText = "";
    uint color = COLOR_WHITE;
    uint activationTime;
    uint activeDuration;
    uint nonControlKeyLastActiveTime;
    uint controlKeyComboTheshold;
    int xAdjust;
    int yAdjust;
    uint8 lastKeyPressed = 0;
    uint8 lastKeyPressedControlFlag = 0;
    int sameKeyPressedNr = 0;

    bool enabled = true;
    bool controlDown = false;
    bool shiftDown = false;
    bool altDown = false;
    bool active = false;
    int buttonHold = 0;
    bool lClick;

    //  Messages after commands
    string messageText = "";
    int xAdjustMessage = 150;
    int yAdjustMessage = 50;
    int messageWidth = 500;
    int messageHeight = 500;
    uint messageActivationTime = 0;
    uint messageShowDuration = 15000;
    uint messageColor = COLOR_WHITE;
    bool messageEnabled = true;

    //  Selected object info
    string selectedInfoText = "";
    int xAdjustSelectedInfo = 150;
    int yAdjustSelectedInfo = 50;
    int selectedInfoWidth = 500;
    int selectedInfoHeight = 500;
    uint selectedInfoColor = COLOR_WHITE;
    bool selectedInfoEnabled = true;
    uint lastSelectedTabIndex = 0;
    uint lastSelectedSubTabIndex = 0;

    //  tabs data
    array<string@> mainTabNames;
    array<array<string@>> subTabNames;
    array<array<array<uint16>>> tabPids;

    CInputVisualizer() {
        activationTime = 0;
        activeDuration = 1000;
        nonControlKeyLastActiveTime = 0;
        controlKeyComboTheshold = 500;
        controlDown = false;
        buttonHold = 0;
        lClick = false;
        xAdjust = 30;
        yAdjust = __ScreenHeight - INT_PANEL_SIZE_H - 50;
        xAdjustMessage = __ScreenWidth - (__ScreenWidth * 0.8);
        messageWidth = __ScreenWidth * 0.6;
        messageHeight = __ScreenHeight * 0.5;
        xAdjustSelectedInfo = 10;
        yAdjustSelectedInfo = OBJ_PANEL_SIZE_H + 10;
        selectedInfoWidth = OBJ_PANEL_SIZE_W;
        selectedInfoHeight = 120;
        loadConfigFromCfgFile();
        loadTabsConfig();
        printTabsData();
    }

    void Draw() {
        //  Input Visualized
        if (enabled && ((GetTick() < activationTime + activeDuration))) {
            //Log("Tick = " + GetTick() + " < activationTime + activeDuration = " + (activationTime + activeDuration) + " (" + activationTime + ", " + activeDuration + ")");
            //  looks like trying to draw empty string will fuck with DrawText, so careful
            string nrText = sameKeyPressedNr > 1 ? (" x" + sameKeyPressedNr) : " ";
            if (letterText.length() == 0) {
                nrText = "";
            }
            statusText = (controlText.length() > 0 ? (controlText + " + " + letterText) : (letterText)) + nrText;
            active = true;
        } else {
            active = false;
            statusText = "";
            controlText = "";
            letterText = "";
            sameKeyPressedNr = 0;
        }
        if (active && statusText.length() > 0) {
            DrawText(statusText, xAdjust, yAdjust, 768, 80, color, FONT_TYPE_FAT, FONT_FLAG_BORDERED);
        }
        //  Messages
        if (messageEnabled) {
            if (GetTick() < messageActivationTime + messageShowDuration) {
                DrawText(messageText, xAdjustMessage, yAdjustMessage, messageWidth, messageHeight, messageColor, FONT_TYPE_FAT, FONT_FLAG_BORDERED | FONT_FLAG_CENTERX);
            }
        }

        if (selectedInfoEnabled) {
            UpdateSelectionInfo();
            if (valid(selectedInfoText) && selectedInfoText.length() > 0) {
                DrawText(selectedInfoText, xAdjustSelectedInfo, yAdjustSelectedInfo, selectedInfoWidth, selectedInfoHeight, selectedInfoColor, FONT_TYPE_FAT, FONT_FLAG_BORDERED);
            }
        }

    }

    bool MouseDown(int click) {
        if (click == MOUSE_CLICK_WHEEL_DOWN) {
            letterText = "MWHEEL DOWN";
            activationTime = GetTick();
            nonControlKeyLastActiveTime = GetTick();
            refreshControlText();
        }
        if (click == MOUSE_CLICK_WHEEL_UP) {
            letterText = "MWHEEL UP";
            activationTime = GetTick();
            nonControlKeyLastActiveTime = GetTick();
            refreshControlText();
        }
        if (click == MOUSE_CLICK_MIDDLE) {
            letterText = "MWHEEL MIDDLE";
            activationTime = GetTick();
            nonControlKeyLastActiveTime = GetTick();
            refreshControlText();
        }
        Draw();
        return false;
    }

    bool MouseUp(int click) {
        if (click == MOUSE_CLICK_MIDDLE) {
            //TabSelect()
        }
        return false;
    }

    void UpdateSelectionInfo() {
        uint index1 = 0, index2 = 0, index3 = 0;
        MapperObject@ object = GetSelectedObject();
        if (valid(object)) {
            uint protoId = object.ProtoId;
            if (getPidTabIndex(protoId, index1, index2, index3)) {
                //Log("Input Visualizer::UpdateSelectionInfo() - [" + index1 + ", " + index2 + ", " + index3 + "]");
                string objInfo = GetMsgStr(TEXTMSG_ITEM, protoId * 100 + 0);
                selectedInfoText = "[" + protoId+ "] - " + mainTabNames[index1] + " -> " + subTabNames[index1][index2] + " -> " + objInfo;
            } else {
                //Log("Input Visualizer::UpdateSelectionInfo() - Couldn't find object index, pleaser revise tabs.cfg");
                selectedInfoText = "N/A";
            }
        } else {
            selectedInfoText = "";
        }
    }

    void JumpToSelectedObjectTab() {
        //Log("JUMP");
        uint index1 = 0, index2 = 0, index3 = 0;
        MapperObject@ object = GetSelectedObject();
        if (valid(object)) {
            uint protoId = object.ProtoId;
            if (getPidTabIndex(protoId, index1, index2, index3)) {
                //Log("Input Visualizer :: JumpToSelectedObjectTab() - protoId = " + protoId + " new index (" + index1 + ", " + index2 + ") vs old index (" + lastSelectedTabIndex + ", " + lastSelectedSubTabIndex + ")");
                TabSelect(index1, subTabNames[index1][index2], true);
                //if (lastSelectedTabIndex != index1 || lastSelectedSubTabIndex != index2) {
                    //Log("Input Visualizer :: JumpToSelectedObjectTab() - protoId = " + protoId + " new index (" + index1 + ", " + index2 + ") vs old index (" + lastSelectedTabIndex + ", " + lastSelectedSubTabIndex + ")");
                    //TabSelect(0, "", false);
                    //TabSelect(index1, subTabNames[index1][index2], true);
                    //lastSelectedTabIndex = index1;
                    //lastSelectedSubTabIndex = index2;
                //}
            }
        }
    }

    void loadTabsConfig() {
        mainTabNames.insertLast("");        // index fix so empty
        mainTabNames.insertLast("Norm");    // 1
        mainTabNames.insertLast("Vehi");    // 2
        mainTabNames.insertLast("Cont");    // 3
        mainTabNames.insertLast("Door");    // 4
        mainTabNames.insertLast("Spec");    // 5
        mainTabNames.insertLast("Grid");    // 6
        mainTabNames.insertLast("Scen");    // 7
        mainTabNames.insertLast("Roof");    // 8
        mainTabNames.insertLast("Humn");    // 9
        mainTabNames.insertLast("Wall");    // 10
        mainTabNames.insertLast("Flor");    // 11
        mainTabNames.insertLast("Othr");    // 12
        mainTabNames.insertLast("Tech");    // 13
        file f;
        if(f.open("tabs.cfg", "r") < 0) {
            Message("Couldn't find tabs.cfg, ignored.");
            return;
        }
        string        line;
        int           tab = -1;
        string        name = "";
        array<uint16> pids;
        while(!f.isEndOfFile()) {
            f.readLine(line);
            int len = line.rawLength();
            while(len > 0 && (line.rawGet(len - 1) == 10 || line.rawGet(len - 1) == 13))
                len--;
            if(len == 0)
                continue;
            line.rawResize(len);
            if(line == "[SubTab]") {
                tab = -1;
                name = "";
                pids.resize(0);
                continue;
            }
            array<string@>@ splitted = splitEx(line, "=");
            if(splitted.length() < 2)
                continue;
            if(splitted[0] == "MainTab") {
                StrToInt(splitted[1], tab);
                continue;
            }
            if(splitted[0] == "Name") {
                name = splitted[1];
                continue;
            }
            if(splitted[0] == "Pids") {
                if(tab < 0)
                    continue;
                array<string@>@ splitted2 = split(splitted[1], " ");
                for(uint i = 0, j = splitted2.length(); i < j; i++) {
                    uint16 pid = 0;
                    StrToInt(splitted2[i], pid);
                    if(pid != 0)
                        pids.insertLast(pid);
                }
                //tabPids.insertLast(pids);
                //subTabNames.insertLast(name);
                //Log("Tab sub category name = " + name);
                while (tab >= int(tabPids.length())) {
                    Log("Inserting tab = " + tab + ", current length = " + tabPids.length());
                    array<string@> tmpSubNames;
                    subTabNames.insertLast(tmpSubNames);
                    array<array<uint16>> tmpPids;
                    tabPids.insertLast(tmpPids);
                }
                Log("Inserting name = " + name + ", pids = " + arrayToString(pids, ", "));
                subTabNames[tab].insertLast("" + name);
                tabPids[tab].insertLast(pids);
            }
        }
        f.close();
    }

    bool getPidTabIndex(uint protoId, uint& index1, uint& index2, uint& index3) {
        for (uint i1 = 0; i1 < tabPids.length(); i1++) {
            for (uint i2 = 0; i2 < tabPids[i1].length(); i2++) {
                for (uint i3 = 0; i3 < tabPids[i1][i2].length(); i3++) {
                    if (protoId == tabPids[i1][i2][i3]) {
                        index1 = i1;
                        index2 = i2;
                        index3 = i3;
                        return true;
                    }
                }
            }
        }
        return false;
    }

    array<uint16>@ getMissingMapperObjects(array<uint16>@ values) {
        array<uint16> missing;
        uint index1, index2, index3;
        uint protoId = 0;
        for (uint i = 0; i < values.length(); i++) {
            protoId = values[i];
            if (!getPidTabIndex(protoId, index1, index2, index3)) {
                missing.insertLast(protoId);
            }
        }
        return missing;
    }

    bool isMissingMapperObjectProto(uint proto) {
        uint index1, index2, index3;
        return !getPidTabIndex(proto, index1, index2, index3);
    }

    string arrayToString(array<uint16>@ values, string& separator) {
        string ret = "";
        for (uint i = 0; i < values.length(); i++) {
            if (i == 0) {
                ret += "" + values[i];
            } else {
                ret += separator + values[i];
            }
        }
        return ret;
    }

    void printTabsData() {
        for (uint i = 0; i < tabPids.length(); i++) {
            if (i < mainTabNames.length()) {
                Log("Main Tab [" + i + "] = " + mainTabNames[i]);
            } else {
                Log("Warning: Main Tab [" + i + "] name not available, Main Tab names count = " + mainTabNames.length());
            }
            //Log("\tSub Tab = " + subTabNames[i]);
            for (uint j = 0; j < tabPids[i].length(); j++) {
                Log("\tName = '" + subTabNames[i][j] + "', pids = {" + arrayToString(tabPids[i][j], " ") + "}");
            }
        }
    }

    void MouseMove(int x, int y) {
    }

    bool KeyDown(uint8 key) {
        if (key == DIK_LCONTROL || key == DIK_RCONTROL) {
            activationTime = GetTick();
            controlDown = true;
            refreshControlText();
            if (buttonHold == 0) {
                letterText = "";
            }
        } else if (key == DIK_LSHIFT || key == DIK_RSHIFT) {
            activationTime = GetTick();
            shiftDown = true;
            refreshControlText();
            if (buttonHold == 0) {
                letterText = "";
            }
        } else if (key == DIK_LMENU || key == DIK_RMENU) {
            activationTime = GetTick();
            altDown = true;
            refreshControlText();
            if (buttonHold == 0) {
                letterText = "";
            }
        } else {
            buttonHold++;
            activationTime = GetTick();
            nonControlKeyLastActiveTime = GetTick();
            letterText = getKeyCodeName(key);
            if (lastKeyPressed == key && lastKeyPressedControlFlag == getCurrentFlags()) {
                sameKeyPressedNr++;
            } else {
                sameKeyPressedNr = 1;
            }
            //Log("INPUT VISUALIZER - KEY DN: (" + key + ", " + lastKeyPressed + ") x" + sameKeyPressedNr + " flags (" + getCurrentFlags() + ", " + lastKeyPressedControlFlag + ")");
            refreshControlText();
            if (controlDown && key == DIK_1) {
                JumpToSelectedObjectTab();
            }

        }
        Draw();
        return false;
    }

    bool KeyUp(uint8 key) {
        if (key == DIK_LCONTROL || key == DIK_RCONTROL) {
            controlDown = false;
            if (GetTick() > nonControlKeyLastActiveTime + controlKeyComboTheshold && (buttonHold == 0 || altDown || shiftDown)) {
                refreshControlText();
            }
        } else if (key == DIK_LSHIFT || key == DIK_RSHIFT) {
            shiftDown = false;
            if (GetTick() > nonControlKeyLastActiveTime + controlKeyComboTheshold && (buttonHold == 0 || altDown || controlDown)) {
                refreshControlText();
            }
        } else if (key == DIK_LMENU || key == DIK_RMENU) {
            altDown = false;
            if (GetTick() > nonControlKeyLastActiveTime + controlKeyComboTheshold && (buttonHold == 0 || controlDown || shiftDown)) {
                refreshControlText();
            }
        } else {
            buttonHold--;
            setControlFlags();
            //Log("INPUT VISUALIZER - KEY UP: (" + key + ", " + lastKeyPressed + ") x" + sameKeyPressedNr + " flags (" + getCurrentFlags() + ", " + lastKeyPressedControlFlag + ")");
            lastKeyPressed = key;
            activationTime = GetTick();
            nonControlKeyLastActiveTime = GetTick();
        }
        Draw();
        return false;
    }

    void InputLost() {
        buttonHold = 0;
        controlDown = false;
        shiftDown = false;
        altDown = false;
        lClick = false;
    }

    //  return false to let other plugins parse the command, or true if this command was for Input Visualizer only
    bool Message(string& message) {
        if (message == "iv" || message == "vis") {
            message = "Input Visualizer commands: on, off, color [AARRGGBB], msg [message].";
            messageActivationTime = GetTick();
            messageText = " " + message;
            return true;
        } else if (substring(message, 0, 3) == "iv " || substring(message, 0, 4) == "vis ") {
            array<string@>@ args = split(message, " ");
            if (valid(args)) {
            } else {
                message = "Input Visualizer Error: Could not parse command arguments.";
                messageActivationTime = GetTick();
                messageText = " " + message;
                return true;
            }
            if (args[1] == "on") {
                enabled = true;
                return true;
            }
            if (args[1] == "off") {
                enabled = false;
                return true;
            }
            if (args[1] == "color") {
                if (args.length() == 3 && args[2].length() <= 8) {
                    if (StrToIntFromHexadecimalFormat(args[2], color)) {
                        message = "Color Set to: " + args[2];
                        messageActivationTime = GetTick();
                        messageText = " " + message;
                    } else {
                        message = "Input Visualizer Error: Incorrect arguments after 'color', try to specify AARRGGBB hexadecimal value.";
                        messageActivationTime = GetTick();
                        messageText = " " + message;
                    }
                    return true;
                } else {
                    message = "Input Visualizer Error: Incorrect arguments after 'color', either specify one more argument as RRGGBB hexadecimal value.";
                    messageActivationTime = GetTick();
                    messageText = "" + message;
                    return true;
                }
            }
            if (args[1] == "msg") {
                string subStr = substring(message, 7, message.length() - 7);
                message = subStr;
                messageActivationTime = GetTick();
                messageText = " " + message;
            }
            if (args[1] == "missing") {
                array<MapperObject@> objects;
                uint selectCount = GetSelectedObjects(objects);
                array<uint16> missing;
                array<MapperObject@> toBeSelected;
                for (uint i = 0; i < objects.length(); i++) {
                    MapperObject@ object = objects[i];
                    if (valid(object)) {
                        if (object.MapObjType == MAP_OBJECT_SCENERY || object.MapObjType == MAP_OBJECT_ITEM) {
                            //Log("Selected mapper object: type = " + object.MapObjType + ", protoId = " + object.ProtoId + " at (" + object.MapX + ", " + object.MapY + ")");
                            if (isMissingMapperObjectProto(object.ProtoId)) {
                                //Log("Missing mapper object proto = " + object.ProtoId + " at hex (" + object.MapX + ", " + object.MapY + ")" );
                                if (missing.find(object.ProtoId) < 0) {
                                    missing.insertLast(object.ProtoId);
                                }
                                toBeSelected.insertLast(object);
                            }
                        }
                    } else {
                        Log("Trying to find missing protos: Found invalid mapper object!!!");
                    }
                }
                if (missing.length() > 0) {
                    missing.sortAsc();
                    message = "Found missing protos in mapper tabs: " + arrayToString(missing, " ");
                    SelectObjects(objects, false);
                    SelectObjects(toBeSelected, true);
                } else {
                    message = "No missing protos in mapper tabs.";
                }
                Log("Input Visualizer: " + message);
                messageActivationTime = GetTick();
                messageText = "" + message;
                return true;
            }
        }
        //  Display messages on top of screen in big
        return false;
    }

    uint8 getCurrentFlags() {
        uint8 flags = 0;
        if (controlDown) {
            SETFLAG(flags, CTRL_FLAG);
        }
        if (shiftDown) {
            SETFLAG(flags, SHIFT_FLAG);
        }
        if (altDown) {
            SETFLAG(flags, ALT_FLAG);
        }
        return flags;
    }

    void setControlFlags() {
        lastKeyPressedControlFlag = 0;
        if (controlDown) {
            SETFLAG(lastKeyPressedControlFlag, CTRL_FLAG);
        }
        if (shiftDown) {
            SETFLAG(lastKeyPressedControlFlag, SHIFT_FLAG);
        }
        if (altDown) {
            SETFLAG(lastKeyPressedControlFlag, ALT_FLAG);
        }
    }

    void refreshControlText() {
        if (controlDown) {
            controlText = "Ctrl";
        } else {
            controlText = "";
        }
        if (shiftDown) {
            if (controlText.length() > 0) {
                controlText += " + Shift";
            } else {
                controlText = "Shift";
            }
        }
        if (altDown) {
            if (controlText.length() > 0) {
                controlText += " + Alt";
            } else {
                controlText = "Alt";
            }
        }
    }

    string getKeyCodeName(uint8 key) {
        switch (key) {
            case DIK_ESCAPE: return "ESC";
            case DIK_1: return "1";
            case DIK_2: return "2";
            case DIK_3: return "3";
            case DIK_4: return "4";
            case DIK_5: return "5";
            case DIK_6: return "6";
            case DIK_7: return "7";
            case DIK_8: return "8";
            case DIK_9: return "9";
            case DIK_0: return "0";
            case DIK_MINUS: return "-";
            case DIK_EQUALS: return "=";
            case DIK_BACK: return "BACK";
            case DIK_TAB: return "TAB";
            case DIK_Q: return "Q";
            case DIK_W: return "W";
            case DIK_E: return "E";
            case DIK_R: return "R";
            case DIK_T: return "T";
            case DIK_Y: return "Y";
            case DIK_U: return "U";
            case DIK_I: return "I";
            case DIK_O: return "O";
            case DIK_P: return "P";
            case DIK_LBRACKET: return "[";
            case DIK_RBRACKET: return "]";
            case DIK_RETURN: return "ENTER";
            case DIK_A: return "A";
            case DIK_S: return "S";
            case DIK_D: return "D";
            case DIK_F: return "F";
            case DIK_G: return "G";
            case DIK_H: return "H";
            case DIK_J: return "J";
            case DIK_K: return "K";
            case DIK_L: return "L";
            case DIK_SEMICOLON: return ";";
            case DIK_APOSTROPHE: return "\'";
            case DIK_GRAVE: return "GRAVE";
            case DIK_BACKSLASH: return "\\";
            case DIK_Z: return "Z";
            case DIK_X: return "X";
            case DIK_C: return "C";
            case DIK_V: return "V";
            case DIK_B: return "B";
            case DIK_N: return "N";
            case DIK_M: return "M";
            case DIK_COMMA: return ",";
            case DIK_PERIOD: return ".";
            case DIK_SLASH: return "/";
            case DIK_MULTIPLY: return "*";
            case DIK_SPACE: return "SPACE";
            case DIK_CAPITAL: return "CAPS LOCK";
            case DIK_F1: return "F1";
            case DIK_F2: return "F2";
            case DIK_F3: return "F3";
            case DIK_F4: return "F4";
            case DIK_F5: return "F5";
            case DIK_F6: return "F6";
            case DIK_F7: return "F7";
            case DIK_F8: return "F8";
            case DIK_F9: return "F9";
            case DIK_F10: return "F10";
            case DIK_NUMLOCK: return "NUM LOCK";
            case DIK_SCROLL: return "SCROLL LOCK";
            case DIK_NUMPAD7: return "7";
            case DIK_NUMPAD8: return "8";
            case DIK_NUMPAD9: return "9";
            case DIK_SUBTRACT: return "-";
            case DIK_NUMPAD4: return "4";
            case DIK_NUMPAD5: return "5";
            case DIK_NUMPAD6: return "6";
            case DIK_ADD: return "+";
            case DIK_NUMPAD1: return "1";
            case DIK_NUMPAD2: return "2";
            case DIK_NUMPAD3: return "3";
            case DIK_NUMPAD0: return "0";
            case DIK_DECIMAL: return ".";
            case DIK_F11: return "F11";
            case DIK_F12: return "F12";
            case DIK_NUMPADENTER: return "ENTER";
            case DIK_DIVIDE: return "/";
            case DIK_SYSRQ: return "SYS RQ";
            case DIK_PAUSE: return "PAUSE";
            case DIK_HOME: return "HOME";
            case DIK_UP: return "UP";
            case DIK_PRIOR: return "PAGE UP";
            case DIK_LEFT: return "LEFT";
            case DIK_RIGHT: return "RIGHT";
            case DIK_END: return "END";
            case DIK_DOWN: return "DOWN";
            case DIK_NEXT: return "PAGE DOWN";
            case DIK_INSERT: return "INSERT";
            case DIK_DELETE: return "DEL";
            case DIK_LWIN: return "LWIN";
            case DIK_RWIN: return "RWIN";
            case DIK_CLIPBOARD_PASTE: return "CLIPB PASTE";
        }
        return "N/A";
    }

    bool loadConfigFromCfgFile() {
        file f;
        if (f.open("data/InputVisualizer.cfg", "r") == -1) {
            Message("File data/InputVisualizer.cfg not found.");
            Log("File data/InputVisualizer.cfg not found.");
            return false;
        }
        uint lineCount = 0;
        uint len = 0;
        uint act = 0;

        while (!f.isEndOfFile()) {
            string line;
            // read one line and preprocess (trim trailing spaces and comments)
            len = f.readLine(line);
            lineCount++;
            //Log("[" + lineCount + ", " + line.length() + "] " + line);
            if (len == 0) {
                continue;
            }
            //  remove line feed, new line and dash comments from end of line
            act = 0;
            while (act < len && (line.rawGet(act) != 10 && line.rawGet(act) != 13 && line[act] != "#")) {
                act++;
            }
            //Log("1");
            if (act == 0) {
                continue;
            }
            line = substring(line, 0, act);
            //  skip white spaces from start
            act = 0;
            len = line.length();
            while (act < len && (line[act] == " " || line[act] == "\t")) {
                act++;
            }
            //Log("2");
            line = substring(line, act, line.length() - act);
            if (line.length() == 0) {
                continue;
            }
            //  skip white spaces from end
            act = line.length() - 1;
            while (act > 0 && (line[act] == " " || line[act] == "\t"))
                act--;
            //Log("3");
            line = substring(line, 0, act + 1);
            //Log("4");
            len = line.length();
            if(len == 0) {
                continue;
            }
            Log("[" + lineCount + "]: " + line);

            array<string@>@ splittedLine = split(line, "=");
            if (splittedLine.length() == 2 && splittedLine[0].length() > 0 && splittedLine[1].length() > 0) {
                if (splittedLine[0] == "enabled") {
                    enabled = splittedLine[1] == "true" ? true : splittedLine[1] == "yes" ? true : splittedLine[1] == "1" ? true : false;
                    Log("Input Visualizer: 'enabled' changed to: " + enabled);
                }
                if (splittedLine[0] == "color") {
                    if (StrToIntAnyFormat(splittedLine[1], color)) {
                        Log("Input Visualizer: 'color' changed to '" + color + "'");
                    } else {
                        Log("Input Visualizer: Failed to load color format. [" + splittedLine[1] + "]");
                    }
                }
                if (splittedLine[0] == "activeDuration") {
                    if (StrToIntAnyFormat(splittedLine[1], activeDuration)) {
                        Log("Input Visualizer: 'activeDuration' changed to '" + activeDuration + "'");
                    } else {
                        Log("Input Visualizer: Failed to load 'activeDuration' value [" + splittedLine[1] + "]");
                    }
                }
                if (splittedLine[0] == "posX") {
                    if (StrToInt(splittedLine[1], xAdjust)) {
                        Log("Input Visualizer: 'posX' changed to '" + xAdjust + "'");
                    } else {
                        Log("Input Visualizer: Failed to load 'posX' value [" + splittedLine[1] + "]");
                    }
                }
                if (splittedLine[0] == "posY") {
                    if (StrToInt(splittedLine[1], yAdjust)) {
                        Log("Input Visualizer: 'posY' changed to '" + yAdjust + "'");
                    } else {
                        Log("Input Visualizer: Failed to load 'posY' value [" + splittedLine[1] + "]");
                    }
                }
                if (splittedLine[0] == "selectedInfoEnabled") {
                    selectedInfoEnabled = splittedLine[1] == "true" ? true : splittedLine[1] == "yes" ? true : splittedLine[1] == "1" ? true : false;
                    Log("Input Visualizer: 'selectedInfoEnabled' changed to: " + selectedInfoEnabled);
                }
                if (splittedLine[0] == "selectedInfoColor") {
                    if (StrToIntAnyFormat(splittedLine[1], selectedInfoColor)) {
                        Log("Input Visualizer: 'color' changed to '" + selectedInfoColor + "'");
                    } else {
                        Log("Input Visualizer: Failed to load color format. [" + splittedLine[1] + "]");
                    }
                }
                if (splittedLine[0] == "selectedInfoPosX") {
                    if (StrToInt(splittedLine[1], xAdjustSelectedInfo)) {
                        Log("Input Visualizer: 'selectedInfoPosX' changed to '" + xAdjustSelectedInfo + "'");
                    } else {
                        Log("Input Visualizer: Failed to load 'selectedInfoPosX' value [" + splittedLine[1] + "]");
                    }
                }
                if (splittedLine[0] == "selectedInfoPosY") {
                    if (StrToInt(splittedLine[1], yAdjustSelectedInfo)) {
                        Log("Input Visualizer: 'selectedInfoPosY' changed to '" + yAdjustSelectedInfo + "'");
                    } else {
                        Log("Input Visualizer: Failed to load 'selectedInfoPosY' value [" + splittedLine[1] + "]");
                    }
                }
            } else {
                Log("Line " + lineCount + ": cannot interpret (" + line + ")");
            }

        }
        f.close();
        return true;
    }
};


class CInputVisualizerPlugin : IMapperPlugin {
    CInputVisualizer inputVisualizer;
    CInputVisualizerPlugin() {
        //inputVisualizer = CInputVisualizer();
    }

    void Render(uint layer) {
        if(layer == 2) {
            inputVisualizer.Draw();
        }
    }

    void Draw() {
        inputVisualizer.Draw();
    }

    string GetName()                            { return "Input Visualizer"; }
    bool MouseDown(int click)                   { return inputVisualizer.MouseDown(click); }
    bool MouseUp(int click)                     { return inputVisualizer.MouseUp(click); }
    void MouseMove(int x, int y)                { inputVisualizer.MouseMove(x, y); }
    bool KeyDown(uint8 key,string& keyText)     { return inputVisualizer.KeyDown(key); }
    bool KeyUp(uint8 key,string& keyText)       { return inputVisualizer.KeyUp(key); }
    void InputLost()                            { inputVisualizer.InputLost(); }
    void Loop()                                 {}
    bool Message(string& msg)                   { return inputVisualizer.Message(msg); }
    void RenderMap()                            {}
};

void RegisterInputVisualizer() {
    IMapperPlugin@ inputVisualizerPlugin = CInputVisualizerPlugin();
    //  add file init here?
    //  inputVisualizerPlugin.Init();

    if (Plugins_Register(inputVisualizerPlugin)) {
        Message("Input Visualizer plugin registered. Keyboard events should be displayed on the sides.  ");
    }
}


#endif // __MAPPER_INPUT_VISUALIZER__ //
